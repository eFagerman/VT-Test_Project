//
// ResponseOperatorProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ResponseOperatorProduct: Codable, JSONEncodable, Hashable {

    /** ID is a unique identifier for the Price Group */
    public var id: String?
    /** PriceGroups contains the IDs of price groups that the product is available for */
    public var priceGroups: [ResponseOperatorPriceGroup]?
    /** Prices contains an array of product/zone/pricegroup objects that should be used to get the price for a specific product configuration */
    public var prices: [ResponseOperatorProductPrice]?
    /** Resources contains a map with localizations */
    public var resources: [String: [String: String]]?
    public var settings: ResponseOperatorProductSettings?
    /** Sort holds the sort order */
    public var sort: Int64?
    /** Zones contains the IDs of zones that the product is available in */
    public var zones: [ResponseOperatorZone]?

    public init(id: String? = nil, priceGroups: [ResponseOperatorPriceGroup]? = nil, prices: [ResponseOperatorProductPrice]? = nil, resources: [String: [String: String]]? = nil, settings: ResponseOperatorProductSettings? = nil, sort: Int64? = nil, zones: [ResponseOperatorZone]? = nil) {
        self.id = id
        self.priceGroups = priceGroups
        self.prices = prices
        self.resources = resources
        self.settings = settings
        self.sort = sort
        self.zones = zones
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case priceGroups = "price_groups"
        case prices
        case resources
        case settings
        case sort
        case zones
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(priceGroups, forKey: .priceGroups)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(resources, forKey: .resources)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(zones, forKey: .zones)
    }
}

